name: Notify LINE from kintone

on:
  schedule:
    - cron: '0 16 * * *' # 日本時間25時（翌1時）
    - cron: '0 23 * * *' # 日本時間8時
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install axios dayjs

    - name: Run notification script
      env:
        KINTONE_TOKEN: ${{ secrets.KINTONE_TOKEN }}
        KINTONE_DOMAIN: ${{ secrets.KINTONE_DOMAIN }}
        LINE_TOKEN: ${{ secrets.LINE_TOKEN }}
        GROUP_ID: ${{ secrets.GROUP_ID }}
      run: |
        echo "Running notification..."
        node <<'EOF'
        const axios = require("axios");
        const dayjs = require("dayjs");
        const utc = require("dayjs/plugin/utc");
        const timezone = require("dayjs/plugin/timezone");

        dayjs.extend(utc);
        dayjs.extend(timezone);

        (async () => {
          const now = dayjs().tz("Asia/Tokyo");
          const hour = now.hour();
          const today = now.format("YYYY-MM-DD");
          const tomorrow = now.add(1, 'day').format("YYYY-MM-DD");

          const headers = {
            "X-Cybozu-API-Token": process.env.KINTONE_TOKEN
          };

          const appId = 10;
          const kintoneUrl = `https://${process.env.KINTONE_DOMAIN}/k/v1/records.json`;

          let messages = [];

          // ▼ 本日アポ通知（8時限定）
          if (hour === 8) {
            let msgToday = "【本日アポ・再アポ通知】\n\n";
            let hasApo = false;

            try {
              const resToday = await axios.get(kintoneUrl, {
                headers,
                params: {
                  app: appId,
                  query: `day >= "${today}T00:00:00" and day < "${tomorrow}T00:00:00" and eigyo_status in ("保留", "再アポ")`
                }
              });

              const records = resToday.data.records;

              if (records.length > 0) {
                msgToday += "▼ 新規アポ\n";
                for (const r of records) {
                  msgToday += `顧客名：${r["line_name"].value}\n商談時間：${dayjs(r["day"].value).tz("Asia/Tokyo").format("YYYY-MM-DD HH:mm")}\n営業担当：${r["ooo"].value}\n集客経路：${r["apo"]?.value || "不明"}\n\n`;
                }
                hasApo = true;
              }

              const resToday2 = await axios.get(kintoneUrl, {
                headers,
                params: {
                  app: appId,
                  query: `day2 >= "${today}T00:00:00" and day2 < "${tomorrow}T00:00:00" and eigyo_status in ("保留", "再アポ")`
                }
              });

              const records2 = resToday2.data.records;

              if (records2.length > 0) {
                msgToday += "▼ 再アポ\n";
                for (const r of records2) {
                  msgToday += `顧客名：${r["line_name"].value}\n再アポ時間：${dayjs(r["day2"].value).tz("Asia/Tokyo").format("YYYY-MM-DD HH:mm")}\n営業担当：${r["ooo"].value}\n集客経路：${r["apo"]?.value || "不明"}\n\n`;
                }
                hasApo = true;
              }

              if (hasApo) {
                msgToday += "よろしくお願いいたします！";
                messages.push(msgToday);
              }
            } catch (e) {
              console.error("❌ 本日アポ通知エラー", e.response?.data || e.message);
            }
          }

          // ▼ アポ未対応アラート（25時限定）
          if (hour === 1) {
            let msgOverdue = "【アポ未対応アラート】\nアポ日を過ぎてもステータスが「保留」のレコードがあります⚠️\n\n";
            let hasOverdue = false;

            try {
              const resOverdue = await axios.get(kintoneUrl, {
                headers,
                params: {
                  app: appId,
                  query: `day < "${today}T00:00:00" and eigyo_status in ("保留")`
                }
              });

              const overdueRecords = resOverdue.data.records;

              if (overdueRecords.length > 0) {
                for (const r of overdueRecords) {
                  msgOverdue += `顧客名：${r["line_name"].value}\nアポ日：${dayjs(r["day"].value).tz("Asia/Tokyo").format("YYYY-MM-DD HH:mm")}\n営業担当：${r["ooo"].value}\n\n`;
                }
                msgOverdue += "至急ご対応をお願いいたします！";
                messages.push(msgOverdue);
              }
            } catch (e) {
              console.error("❌ アポ未対応チェックエラー", e.response?.data || e.message);
            }
          }

          // ▼ LINE送信処理
          if (messages.length > 0) {
            for (const text of messages) {
              try {
                await axios.post("https://api.line.me/v2/bot/message/push",
                  {
                    to: process.env.GROUP_ID,
                    messages: [{ type: "text", text }]
                  },
                  {
                    headers: {
                      Authorization: `Bearer ${process.env.LINE_TOKEN}`,
                      "Content-Type": "application/json"
                    }
                  }
                );
              } catch (e) {
                console.error("❌ LINE送信エラー", e.response?.data || e.message);
              }
            }

            console.log("📤 LINE通知送信完了");
          } else {
            console.log("✅ 通知対象なし");
          }
        })().catch(e => {
          console.error("❌ 想定外のエラー", e.response?.data || e.message);
        });
        EOF

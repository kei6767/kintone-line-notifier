name: Notify LINE from kintone

on:
  schedule:
    - cron: '0 16 * * *' # 日本時間25時（翌1時）
    - cron: '0 23 * * *' # 日本時間8時
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install axios dayjs

    - name: Run notification script
      env:
        KINTONE_TOKEN: ${{ secrets.KINTONE_TOKEN }}
        KINTONE_DOMAIN: ${{ secrets.KINTONE_DOMAIN }}
        LINE_TOKEN: ${{ secrets.LINE_TOKEN }}
        GROUP_ID: ${{ secrets.GROUP_ID }}
      run: |
        echo "Running notification..."
        node <<'EOF'
        const axios = require("axios");
        const dayjs = require("dayjs");
        const utc = require("dayjs/plugin/utc");
        const timezone = require("dayjs/plugin/timezone");

        dayjs.extend(utc);
        dayjs.extend(timezone);

        (async () => {
          const today = dayjs().tz("Asia/Tokyo").format("YYYY-MM-DD");
          const tomorrow = dayjs().tz("Asia/Tokyo").add(1, 'day').format("YYYY-MM-DD");

          console.log(`📅 今日: ${today}`);
          console.log(`📅 明日: ${tomorrow}`);

          const headers = {
            "X-Cybozu-API-Token": process.env.KINTONE_TOKEN
          };

          const appId = 10;
          const kintoneUrl = `https://${process.env.KINTONE_DOMAIN}/k/v1/records.json`;

          let messages = [];

          // ▼ 保留通知（商談未対応）
          try {
            const resPending = await axios.get(kintoneUrl, {
              headers,
              params: {
                app: appId,
                query: `eigyo_status in ("保留") and day < "${today}"`
              }
            });

            const records = resPending.data.records;
            if (records.length > 0) {
              let msg = "【商談未対応アラート】\n\n以下の案件が「保留」のままです。\n\n";
              for (const r of records) {
                msg += `顧客名：${r["line_name"].value}\n商談予定日：${r["day"].value.split("T")[0]}\n営業担当：${r["ooo"].value}\n\n`;
              }
              msg += "ご確認お願いいたします。";
              messages.push(msg);
            }
          } catch (e) {
            console.error("❌ 保留通知エラー", e.response?.data || e.message);
            process.exit(1);
          }

          // ▼ 本日アポまとめ通知
          let msgToday = "【本日アポ・再アポ通知】\n\n";
          let hasApo = false;

          // 通常アポ（day）
          try {
            const resToday = await axios.get(kintoneUrl, {
              headers,
              params: {
                app: appId,
                query: `day >= "${today}" and day < "${tomorrow}"`
              }
            });

            const records = resToday.data.records;
            if (records.length > 0) {
              msgToday += "▼ 通常アポ\n";
              for (const r of records) {
                msgToday += `顧客名：${r["line_name"].value}\n商談時間：${r["day"].value.replace("T", " ").slice(0, 16)}\n営業担当：${r["ooo"].value}\n集客経路：${r["apo"]?.value || "不明"}\n`;
              }
              msgToday += "\n";
              hasApo = true;
            }
          } catch (e) {
            console.error("❌ 本日アポ通知（day）エラー", e.response?.data || e.message);
            process.exit(1);
          }

          // 再アポ（day2）
          try {
            const resToday2 = await axios.get(kintoneUrl, {
              headers,
              params: {
                app: appId,
                query: `day2 >= "${today}" and day2 < "${tomorrow}"`
              }
            });

            const records2 = resToday2.data.records;
            if (records2.length > 0) {
              msgToday += "▼ 再アポ\n";
              for (const r of records2) {
                msgToday += `顧客名：${r["line_name"].value}\n再アポ時間：${r["day2"].value.replace("T", " ").slice(0, 16)}\n営業担当：${r["ooo"].value}\n集客経路：${r["apo"]?.value || "不明"}\n`;
              }
              msgToday += "\n";
              hasApo = true;
            }
          } catch (e) {
            console.error("❌ 本日アポ通知（day2）エラー", e.response?.data || e.message);
            process.exit(1);
          }

          if (hasApo) {
            msgToday += "よろしくお願いいたします！";
            messages.push(msgToday);
          }

          // ▼ LINE送信処理
          if (messages.length > 0) {
            for (const text of messages) {
              await axios.post("https://api.line.me/v2/bot/message/push",
                {
                  to: process.env.GROUP_ID,
                  messages: [{ type: "text", text }]
                },
                {
                  headers: {
                    Authorization: `Bearer ${process.env.LINE_TOKEN}`,
                    "Content-Type": "application/json"
                  }
                }
              );
            }
            console.log("📤 LINE通知送信完了");
          } else {
            console.log("✅ 通知対象なし");
          }
        })().catch(e => {
          console.error("❌ エラー", e.response?.data || e.message);
          process.exit(1);
        });
        EOF




name: Notify LINE from kintone

on:
  schedule:
    - cron: '0 23 * * *' # Êó•Êú¨ÊôÇÈñì 8:00ÔºàUTC„ÅÆ23:00Ôºâ
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install axios dayjs dayjs-plugin-utc dayjs-plugin-timezone

    - name: Run notification script
      env:
        KINTONE_TOKEN: ${{ secrets.KINTONE_TOKEN }}
        KINTONE_DOMAIN: ${{ secrets.KINTONE_DOMAIN }}
        LINE_TOKEN: ${{ secrets.LINE_TOKEN }}
        GROUP_ID: ${{ secrets.GROUP_ID }}
      run: |
        echo "Running notification..."
        node <<'EOF'
        const axios = require("axios");
        const dayjs = require("dayjs");
        const utc = require("dayjs/plugin/utc");
        const timezone = require("dayjs/plugin/timezone");
        dayjs.extend(utc);
        dayjs.extend(timezone);

        (async () => {
          const today = dayjs().tz("Asia/Tokyo").format("YYYY-MM-DD");
          const headers = { "X-Cybozu-API-Token": process.env.KINTONE_TOKEN };
          const appId = 10;

          // üîî ‰øùÁïô„Ç¢„É©„Éº„Éà
          const holdRes = await axios.get(`https://${process.env.KINTONE_DOMAIN}/k/v1/records.json`, {
            headers,
            params: {
              app: appId,
              query: `eigyo_status in ("‰øùÁïô") and day < "${today}"`
            }
          });

          const holdRecords = holdRes.data.records;
          if (holdRecords.length > 0) {
            let message = "üö®„ÄêÂïÜË´áÊú™ÂØæÂøú„Ç¢„É©„Éº„Éà„Äë\n\n‰ª•‰∏ã„ÅÆÊ°à‰ª∂„Åå„Äå‰øùÁïô„Äç„ÅÆ„Åæ„Åæ„Åß„Åô‚ö†Ô∏è\n\n";
            for (const r of holdRecords) {
              message += `üë§ È°ßÂÆ¢ÂêçÔºö${r["line_name"].value}\n`;
              message += `üìÖ ÂïÜË´á‰∫àÂÆöÊó•Ôºö${r["day"].value.split("T")[0]}\n`;
              message += `üôç‚Äç‚ôÇÔ∏è Âñ∂Ê•≠ÊãÖÂΩìÔºö${r["ooo"].value}\n\n`;
            }
            message += "„ÅîÁ¢∫Ë™ç„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºÅ";

            await axios.post("https://api.line.me/v2/bot/message/push", {
              to: process.env.GROUP_ID,
              messages: [{ type: "text", text: message }]
            }, {
              headers: {
                Authorization: `Bearer ${process.env.LINE_TOKEN}`,
                "Content-Type": "application/json"
              }
            });
            console.log("üì§ ‰øùÁïô„Ç¢„É©„Éº„ÉàÈÄÅ‰ø°ÂÆå‰∫ÜÔºÅ");
          }

          // üîî Êú¨Êó•„Ç¢„ÉùÈÄöÁü•
          const todayRes = await axios.get(`https://${process.env.KINTONE_DOMAIN}/k/v1/records.json`, {
            headers,
            params: {
              app: appId,
              query: `day = "${today}"`
            }
          });

          const todayRecords = todayRes.data.records;
          if (todayRecords.length > 0) {
            let message = "üìÖ„ÄêÊú¨Êó•„Ç¢„ÉùÈÄöÁü•„Äë\n\n‰ª•‰∏ã„ÅÆ„ÅäÂÆ¢Êßò„Å´Êú¨Êó•„Ç¢„Éù„Åå„ÅÇ„Çä„Åæ„ÅôÔºÅ\n\n";
            for (const r of todayRecords) {
              message += `üë§ È°ßÂÆ¢ÂêçÔºö${r["line_name"].value}\n`;
              message += `üìÖ ÂïÜË´á‰∫àÂÆöÊó•Ôºö${r["day"].value.split("T")[0]}\n`;
              message += `üôç‚Äç‚ôÇÔ∏è Âñ∂Ê•≠ÊãÖÂΩìÔºö${r["ooo"].value}\n\n`;
            }
            message += "ÂØæÂøú„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºÅ";

            await axios.post("https://api.line.me/v2/bot/message/push", {
              to: process.env.GROUP_ID,
              messages: [{ type: "text", text: message }]
            }, {
              headers: {
                Authorization: `Bearer ${process.env.LINE_TOKEN}`,
                "Content-Type": "application/json"
              }
            });
            console.log("üì§ Êú¨Êó•„Ç¢„ÉùÈÄöÁü•ÈÄÅ‰ø°ÂÆå‰∫ÜÔºÅ");
          }

          if (holdRecords.length === 0 && todayRecords.length === 0) {
            console.log("‚úÖ ÈÄöÁü•ÂØæË±°„Å™„Åó");
          }

        })().catch(e => {
          console.error("‚ùå „Ç®„É©„Éº", e.response?.data || e.message);
          process.exit(1);
        });
        EOF





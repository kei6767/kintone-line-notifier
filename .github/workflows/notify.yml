name: Notify LINE from kintone

on:
  schedule:
    - cron: '0 16 * * *'  # 日本時間 25時（UTCで16時）
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install axios dayjs

    - name: Run script
      env:
        KINTONE_TOKEN: ${{ secrets.KINTONE_TOKEN }}
        KINTONE_DOMAIN: ${{ secrets.KINTONE_DOMAIN }}
        LINE_TOKEN: ${{ secrets.LINE_TOKEN }}
        GROUP_ID: ${{ secrets.GROUP_ID }}
      run: |
        node <<EOF
        const axios = require("axios");
        const dayjs = require("dayjs");

        (async () => {
          const today = dayjs().format("YYYY-MM-DD");

          const res = await axios.get(
            \`https://${process.env.KINTONE_DOMAIN}/k/v1/records.json\`,
            {
              headers: { "X-Cybozu-API-Token": process.env.KINTONE_TOKEN },
              params: {
                app: 10,
                query: \`日時 < "${today}" and 営業ステータス = "保留"\`
              }
            }
          );

          const records = res.data.records;
          if (records.length === 0) return;

          let message = "【商談未対応アラート】\\n\\n以下の案件が「保留」のままです⚠️\\n\\n";
          for (const r of records) {
            message += \`顧客名：\${r["顧客名（LINE名）"].value}\\n\`;
            message += \`商談予定日：\${r["日時"].value.split("T")[0]}\\n\`;
            message += \`営業担当：\${r["営業担当"].value}\\n\\n\`;
          }
          message += "ご確認お願いいたします。";

          await axios.post("https://api.line.me/v2/bot/message/push",
            {
              to: process.env.GROUP_ID,
              messages: [{ type: "text", text: message }]
            },
            {
              headers: {
                Authorization: \`Bearer \${process.env.LINE_TOKEN}\`,
                "Content-Type": "application/json"
              }
            }
          );
        })().catch(e => {
          console.error("❌ エラー", e.response?.data || e.message);
          process.exit(1);
        });
        EOF
